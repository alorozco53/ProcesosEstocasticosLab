mat <- t(array(c(1,0,0,0,0,0,1/2,1/2,0,0,1/5,1/5,1/5,2/5,0,0,0,0,0,1,0,0,0,1/2,1/2),dim=c(5,5)))
mat
cumsum(mat)
cumsum(mat[1,])
cumsum(mat[2,])
cumsum(mat[3,])
cumsum(mat[4,])
cumsum(mat[5,])
mat
source('useful.R')
:s
Leads(mat,1,1)
Leads(mat,1,2)
for (i in 1:5) {print(Leads(1,i))}
for (i in 1:5) {print(Leads(mat,1,i))}
for (i in 1:5) {print(Leads(mat,2,i))}
for (i in 1:5) {print(Leads(mat,2,i))}
for (i in 1:5) {print(Leads(mat,2,i))}
for (i in 1:5) {print(Leads(mat,1,i))}
for (i in 1:5) {print(Leads(mat,2,i))}
source('useful.R')
for (i in 1:5) {print(Leads(mat,2,i))}
Leads(mat,2,5)
MStep(mat,1,0,2,5)
MStep(mat,1,1,2,5)
MStep(mat,2,1,2,5)
Leads(mat,2,5)
}log
log
log(0)
log(1)
log(2)
log(10)
log(2.73)
log(e())
e
pi
log(exp)
log(exp(1))
log(0.2)
log(0.1)
log(0.000001)
log(0.9)
Leads(mat,2,5)
source('useful.R')
Leads(mat,2,5)
source('useful.R')
Leads(mat,2,5)
for (i in 1:5) {print(Leads(1,i))}
for (i in 1:5) {print(Leads(mat,1,i))}
source('useful.R')
for (i in 1:5) {print(Leads(mat,1,i))}
for (i in 1:5) {print(Leads(mat,2,i))}
for (i in 1:5) {print(Leads(mat,2,i))}
for (i in 1:5) {print(Leads(mat,3,i))}
for (i in 1:5) {print(Leads(mat,4,i))}
for (i in 1:5) {print(Leads(mat,5,i))}
matrix(1:4)
matrix(1:4,2,2)
matrix(1:4,1:4,2,2)
foo <- array(c('0'),dim=dim(mat))
foo
source('useful.R')
Communicate(trans.matrix,1,2)
Communicate(mat,1,2)
Communicate(mat,2,2)
Communicate(mat,4,2)
Communicate(mat,4,1)
Communicate(mat,4,5)
StateClassifMatrix(mat)
mat
dim(mat)
dim(mat)[2]
source('useful.R')
StateClassifMatrix(mat)
StateClassifMatrix(matrix(c(1/10),10,10))
StateClassifMatrix(matrix(c(1/10),10,10))
diag(10,10)
diag(x=1,10,10)
StateClassifMatrix(diag(x=1,10,10))
StateClassifMatrix(diag(x=1,10,10))
mat <- matrix(c(0),10,10)
mat
mat[1,7] <- 1
mat
mat[2,2] = mat[2,3] =.3
mat
mat[2,5] <- mat[5,6] <- mat[5,8] <-.3
mat
mat[2,4] <- mat[6,7] <- .1
mat
mat[3,3] = .6
mat[3,8] <- mat[5,2] <- .4
mat
mat[6,4] <- .9
mat[7,10] <- 10
mat[9,9] <- mat[10,1] <- 10
amt
mat
mat[9,9] <- mat[10,1] <- 1
mat
mat[7,10] <- 1
mat
mat[8,3] <- mat[8,8] <- .2
mat
for state in dim(mat)[1] { print(cumsum(mat[state,]))}
for (state in dim(mat)[1]) { print(cumsum(mat[state,]))}
type(for (state in dim(mat)[1]) { print(cumsum(mat[state,]))})
typeof(for (state in dim(mat)[1]) { print(cumsum(mat[state,]))})
for (state in dim(mat)[1]) { print(cumsum(mat[state,]))}
mat
source('useful.R')
StateClassifMatrix(mat)
class <- StateClassifMatrix(mat)
class
typeof(class)
class[1,] == class[10,]
and(class[1,] == class[10,])
class[1,] is class[10,]
?all
?exists
all
all(class[1,] == class[10,])
class
 for (state in c(2,3,5,8)) {print(mat[state,])}
for (state in c(2,3,5,8)) {print(class[state,])}
for (state in c(1,4,7,9,10)) {print(class[state,])}
class[6,]
class[6,]
matrix(c(1/4,3/4,1/5,4/5),2,2)
t(matrix(c(1/4,3/4,1/5,4/5),2,2))
t(matrix(c(1/4,3/4,1/5,4/5),2,2)) -> tc
tc
solve(tc,c('pi0','pi1'))
t(matrix(c(3/4,3/4,1/5,1/5),2,2)) -> tc
tc
solve(tc,c(0,0))
solve(tc,c(1,0))
solve(tc,c(1,1))
det(tc)
solve(tc,matrix(c(0),2,1))
matrix(c(0),2,1
)
(3/4)*5
(4/15)*(3/4)*5
tc
tc[3,] <- c(1,1)
t(matrix(c(3/4,3/4,1/5,1/5,1,1),3,2)) -> tc
tc
t(tc)
dim(tc) <- c(2,3)
tc
t(matrix(c(3/4,3/4,1/5,1/5,1,1),2,3)) -> tc
tc
solve(tc,c(0,0))
solve(tc,c(0,0))
